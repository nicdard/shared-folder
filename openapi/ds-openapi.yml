openapi: 3.0.3
info:
  title: ds
  description: ''
  contact:
    name: Nicola Dardanis
  license:
    name: GPL-3.0
  version: 0.1.0
paths:
  /api-doc.json:
    get:
      tags:
      - crate
      summary: Return JSON version of an OpenAPI schema
      operationId: openapi
      responses:
        '200':
          description: Openapi spec of this server
  /folders:
    get:
      tags:
      - crate
      summary: List all the folders in which the user participates.
      operationId: list_folders_for_user
      responses:
        '200':
          description: List of folders.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFolderResponse'
        '401':
          description: Unkwown or unauthorized user.
        '500':
          description: Internal Server Error, couldn't retrieve the users
    post:
      tags:
      - crate
      summary: Create a new folder and link it to the user.
      operationId: create_folder
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateFolderRequest'
        required: true
      responses:
        '201':
          description: New folder created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderResponse'
        '401':
          description: Unkwown or unauthorized user.
        '500':
          description: Internal Server Error
  /folders/<folder_id>/keys:
    post:
      tags:
      - crate
      operationId: fetch_key_package
      parameters:
      - name: folder_id
        in: path
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchKeyPackageRequest'
        required: true
      responses:
        '200':
          description: Retrieved a key package.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unkwown or unauthorized user.
        '500':
          description: Internal Server Error
  /folders/<folder_id>/proposals:
    get:
      tags:
      - crate
      operationId: get_pending_proposal
      parameters:
      - name: folder_id
        in: path
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      responses:
        '200':
          description: Retrieved the eldest proposal.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMessage'
        '401':
          description: Unkwown or unauthorized user.
        '404':
          description: Not found.
        '500':
          description: Internal Server Error
    post:
      tags:
      - crate
      operationId: try_publish_proposal
      parameters:
      - name: folder_id
        in: path
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateGroupMessageRequest'
        required: true
      responses:
        '200':
          description: Create a proposal.
        '401':
          description: Unkwown or unauthorized user.
        '409':
          description: 'Conflict: the user state is outdated, please fetch the pending proposals first.'
        '500':
          description: Internal Server Error
  /folders/{folder_id}:
    get:
      tags:
      - crate
      summary: List all the users.
      operationId: get_folder
      parameters:
      - name: folder_id
        in: path
        description: Folder id.
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      responses:
        '200':
          description: The requested folder.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderResponse'
        '401':
          description: Unkwown or unauthorized user.
        '404':
          description: Folder not found.
        '500':
          description: Internal Server Error, couldn't retrieve the users
    delete:
      tags:
      - crate
      summary: Unshare a folder with other users.
      operationId: remove_self_from_folder
      parameters:
      - name: folder_id
        in: path
        description: The folder id.
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      responses:
        '200':
          description: User removed from folder.
        '401':
          description: Unkwown or unauthorized user.
        '404':
          description: Not found.
        '500':
          description: Internal Server Error, couldn't retrieve the users
    patch:
      tags:
      - crate
      summary: Share a folder with other users.
      description: If some of the users already can see the folder, they will be ignored.
      operationId: share_folder
      parameters:
      - name: folder_id
        in: path
        description: Folder id.
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareFolderRequest'
        required: true
      responses:
        '200':
          description: Folder shared.
        '401':
          description: Unkwown or unauthorized user.
        '404':
          description: Not found.
        '500':
          description: Internal Server Error, couldn't retrieve the users
  /folders/{folder_id}/files/{file_id}:
    get:
      tags:
      - crate
      summary: Get a file from the cloud storage.
      operationId: get_file
      parameters:
      - name: folder_id
        in: path
        description: Folder id.
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      - name: file_id
        in: path
        description: File identifier.
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The requested file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderFileResponse'
        '401':
          description: Unkwown or unauthorized user.
        '404':
          description: File not found.
        '500':
          description: Internal Server Error, couldn't retrieve the file
    post:
      tags:
      - crate
      summary: Upload a file to the cloud storage.
      operationId: upload_file
      parameters:
      - name: folder_id
        in: path
        description: Folder id.
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      - name: file_id
        in: path
        description: File identifier.
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Upload'
        required: true
      responses:
        '201':
          description: File uploaded.
        '401':
          description: Unkwown or unauthorized user.
        '404':
          description: Folder not found.
        '500':
          description: Internal Server Error, couldn't retrieve the file
  /folders/{folder_id}/metadatas:
    get:
      tags:
      - crate
      summary: Get the metadata of a folder. The metadata contain the list of files and their metadata.
      operationId: get_metadata
      parameters:
      - name: folder_id
        in: path
        description: Folder id.
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      responses:
        '200':
          description: The requested folder's metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderFileResponse'
        '401':
          description: Unkwown or unauthorized user.
        '404':
          description: File not found.
        '500':
          description: Internal Server Error, couldn't retrieve the file
    post:
      tags:
      - crate
      summary: Upload a new version of the metadata of a folder. The metadata contain the list of files and their metadata.
      operationId: post_metadata
      parameters:
      - name: folder_id
        in: path
        description: Folder id.
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MetadataUpload'
        required: true
      responses:
        '201':
          description: Metadata file uploaded.
        '401':
          description: Unkwown or unauthorized user.
        '404':
          description: Folder not found.
        '500':
          description: Internal Server Error, couldn't retrieve the file
  /folders/{folder_id}/proposals/{message_id}:
    delete:
      tags:
      - crate
      summary: Unshare a folder with other users.
      operationId: ack_message
      parameters:
      - name: folder_id
        in: path
        description: The folder id.
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      - name: message_id
        in: path
        description: The message to delete.
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      responses:
        '200':
          description: Message removed from the queue.
        '401':
          description: Unkwown or unauthorized user.
        '404':
          description: Not found.
        '500':
          description: Internal Server Error, couldn't delete the message
  /users:
    get:
      tags:
      - crate
      summary: List all the users.
      operationId: list_users
      responses:
        '200':
          description: List of users using the SSF.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
        '401':
          description: Unkwown or unauthorized user.
        '500':
          description: Internal Server Error, couldn't retrieve the users
    post:
      tags:
      - crate
      summary: Create a new user checking that the client certificate contains the email that is used to create the account.
      operationId: create_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        '201':
          description: New account created.
        '400':
          description: Bad request.
        '401':
          description: Unauthorized user, please, set a valid client credential.
        '409':
          description: Conflict.
  /users/keys:
    post:
      tags:
      - crate
      operationId: publish_key_package
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateKeyPackageRequest'
        required: true
      responses:
        '201':
          description: New key package created.
        '401':
          description: Unkwown or unauthorized user.
        '500':
          description: Internal Server Error
components:
  schemas:
    CreateFolderRequest:
      type: object
      description: Create the folder with the initial Metadata file.
      required:
      - metadata
      properties:
        metadata:
          type: string
          format: binary
          description: The metadata file to upload.
    CreateGroupMessageRequest:
      type: object
      description: Create a proposal.
      required:
      - proposal
      properties:
        proposal:
          type: string
          format: binary
          description: The proposal to upload.
    CreateKeyPackageRequest:
      type: object
      description: Create a key package for a user.
      required:
      - key_package
      properties:
        key_package:
          type: string
          format: binary
          description: The metadata file to upload.
    CreateKeyPackageResponse:
      type: object
      required:
      - key_package_id
      properties:
        key_package_id:
          type: integer
          format: int64
          description: The id of the created key package.
          minimum: 0
    CreateUserRequest:
      type: object
      required:
      - email
      properties:
        email:
          type: string
          description: The email contained in the associated credentials sent through mTLS.
    FetchKeyPackageRequest:
      type: object
      description: Retrieves a key package of another user.
      required:
      - user_email
      properties:
        user_email:
          type: string
          description: The user email
    FolderFileResponse:
      type: object
      required:
      - file
      properties:
        etag:
          type: string
          nullable: true
        file:
          type: string
          format: binary
        version:
          type: string
          nullable: true
    FolderResponse:
      type: object
      required:
      - id
      properties:
        etag:
          type: string
          nullable: true
        id:
          type: integer
          format: int64
          description: The id of the folder.
          minimum: 0
        metadata_content:
          type: string
          format: binary
          nullable: true
        version:
          type: string
          nullable: true
    GroupMessage:
      type: object
      required:
      - message_id
      - folder_id
      - payload
      properties:
        folder_id:
          type: integer
          format: int64
          description: The folder id.
          minimum: 0
        message_id:
          type: integer
          format: int64
          description: The folder the group is sharing.
          minimum: 0
        payload:
          type: string
          format: binary
          description: The payload of the GRaPPA message.
    ListFolderResponse:
      type: object
      required:
      - folders
      properties:
        folders:
          type: array
          items:
            type: integer
            format: int64
            minimum: 0
    ListUsersResponse:
      type: object
      required:
      - emails
      properties:
        emails:
          type: array
          items:
            type: string
          description: The emails of the users.
    MetadataUpload:
      type: object
      required:
      - metadata
      properties:
        metadata:
          type: string
          format: binary
          description: The metadata file to upload.
        parent_etag:
          type: string
          description: The previous metadata etag to which this file is related.
          nullable: true
        parent_version:
          type: string
          description: The previous metadata version to which this file is related.
          nullable: true
    ShareFolderRequest:
      type: object
      required:
      - emails
      properties:
        emails:
          type: array
          items:
            type: string
          description: The emails of the users to share the folder with. The id is extracted from the path.
    Upload:
      type: object
      description: Upload a file to the server.
      required:
      - file
      - metadata
      properties:
        file:
          type: string
          format: binary
          description: The file to upload.
        metadata:
          type: string
          format: binary
          description: The metadata file to upload.
        parent_etag:
          type: string
          description: The previous metadata etag to which this file is related.
          nullable: true
        parent_version:
          type: string
          description: The previous metadata version to which this file is related.
          nullable: true
    UploadFileResponse:
      type: object
      description: When a file is uploaded successfully, an etag is returned with the latest version of the metadata file of the folder.
      properties:
        etag:
          type: string
          description: The metadata etag.
          nullable: true
        version:
          type: string
          description: The metadata version.
          nullable: true
