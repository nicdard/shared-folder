// This file is auto-generated by @hey-api/openapi-ts

export const $CreateFolderRequest = {
  type: 'object',
  description: 'Create the folder with the initial Metadata file.',
  required: ['metadata'],
  properties: {
    metadata: {
      type: 'string',
      format: 'binary',
      description: 'The metadata file to upload.',
    },
  },
} as const;

export const $CreateGroupMessageRequest = {
  type: 'object',
  description: 'Create a proposal.',
  required: ['proposal'],
  properties: {
    proposal: {
      type: 'string',
      format: 'binary',
      description: 'The proposal to upload.',
    },
  },
} as const;

export const $CreateKeyPackageRequest = {
  type: 'object',
  description: 'Create a key package for a user.',
  required: ['key_package'],
  properties: {
    key_package: {
      type: 'string',
      format: 'binary',
      description: 'The metadata file to upload.',
    },
  },
} as const;

export const $CreateKeyPackageResponse = {
  type: 'object',
  required: ['key_package_id'],
  properties: {
    key_package_id: {
      type: 'integer',
      format: 'int64',
      description: 'The id of the created key package.',
      minimum: 0,
    },
  },
} as const;

export const $CreateUserRequest = {
  type: 'object',
  required: ['email'],
  properties: {
    email: {
      type: 'string',
      description:
        'The email contained in the associated credentials sent through mTLS.',
    },
  },
} as const;

export const $FetchKeyPackageRequest = {
  type: 'object',
  description: 'Retrieves a key package of another user.',
  required: ['user_email'],
  properties: {
    user_email: {
      type: 'string',
      description: 'The user email',
    },
  },
} as const;

export const $FolderFileResponse = {
  type: 'object',
  required: ['file'],
  properties: {
    etag: {
      type: 'string',
      nullable: true,
    },
    file: {
      type: 'string',
      format: 'binary',
    },
    version: {
      type: 'string',
      nullable: true,
    },
  },
} as const;

export const $FolderResponse = {
  type: 'object',
  required: ['id'],
  properties: {
    etag: {
      type: 'string',
      nullable: true,
    },
    id: {
      type: 'integer',
      format: 'int64',
      description: 'The id of the folder.',
      minimum: 0,
    },
    metadata_content: {
      type: 'string',
      format: 'binary',
      nullable: true,
    },
    version: {
      type: 'string',
      nullable: true,
    },
  },
} as const;

export const $GroupMessage = {
  type: 'object',
  required: ['message_id', 'folder_id', 'payload'],
  properties: {
    folder_id: {
      type: 'integer',
      format: 'int64',
      description: 'The folder id.',
      minimum: 0,
    },
    message_id: {
      type: 'integer',
      format: 'int64',
      description: 'The folder the group is sharing.',
      minimum: 0,
    },
    payload: {
      type: 'string',
      format: 'binary',
      description: 'The payload of the GRaPPA message.',
    },
  },
} as const;

export const $ListFolderResponse = {
  type: 'object',
  required: ['folders'],
  properties: {
    folders: {
      type: 'array',
      items: {
        type: 'integer',
        format: 'int64',
        minimum: 0,
      },
    },
  },
} as const;

export const $ListUsersResponse = {
  type: 'object',
  required: ['emails'],
  properties: {
    emails: {
      type: 'array',
      items: {
        type: 'string',
      },
      description: 'The emails of the users.',
    },
  },
} as const;

export const $MetadataUpload = {
  type: 'object',
  required: ['metadata'],
  properties: {
    metadata: {
      type: 'string',
      format: 'binary',
      description: 'The metadata file to upload.',
    },
    parent_etag: {
      type: 'string',
      description: 'The previous metadata etag to which this file is related.',
      nullable: true,
    },
    parent_version: {
      type: 'string',
      description:
        'The previous metadata version to which this file is related.',
      nullable: true,
    },
  },
} as const;

export const $ShareFolderRequest = {
  type: 'object',
  required: ['emails'],
  properties: {
    emails: {
      type: 'array',
      items: {
        type: 'string',
      },
      description:
        'The emails of the users to share the folder with. The id is extracted from the path.',
    },
  },
} as const;

export const $Upload = {
  type: 'object',
  description: 'Upload a file to the server.',
  required: ['file', 'metadata'],
  properties: {
    file: {
      type: 'string',
      format: 'binary',
      description: 'The file to upload.',
    },
    metadata: {
      type: 'string',
      format: 'binary',
      description: 'The metadata file to upload.',
    },
    parent_etag: {
      type: 'string',
      description: 'The previous metadata etag to which this file is related.',
      nullable: true,
    },
    parent_version: {
      type: 'string',
      description:
        'The previous metadata version to which this file is related.',
      nullable: true,
    },
  },
} as const;

export const $UploadFileResponse = {
  type: 'object',
  description:
    'When a file is uploaded successfully, an etag is returned with the latest version of the metadata file of the folder.',
  properties: {
    etag: {
      type: 'string',
      description: 'The metadata etag.',
      nullable: true,
    },
    version: {
      type: 'string',
      description: 'The metadata version.',
      nullable: true,
    },
  },
} as const;
